/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DoctorSchedule as PrismaDoctorSchedule,
  Doctor as PrismaDoctor,
} from "@prisma/client";

export class DoctorScheduleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DoctorScheduleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.doctorSchedule.count(args);
  }

  async doctorSchedules(
    args: Prisma.DoctorScheduleFindManyArgs
  ): Promise<PrismaDoctorSchedule[]> {
    return this.prisma.doctorSchedule.findMany(args);
  }
  async doctorSchedule(
    args: Prisma.DoctorScheduleFindUniqueArgs
  ): Promise<PrismaDoctorSchedule | null> {
    return this.prisma.doctorSchedule.findUnique(args);
  }
  async createDoctorSchedule(
    args: Prisma.DoctorScheduleCreateArgs
  ): Promise<PrismaDoctorSchedule> {
    return this.prisma.doctorSchedule.create(args);
  }
  async updateDoctorSchedule(
    args: Prisma.DoctorScheduleUpdateArgs
  ): Promise<PrismaDoctorSchedule> {
    return this.prisma.doctorSchedule.update(args);
  }
  async deleteDoctorSchedule(
    args: Prisma.DoctorScheduleDeleteArgs
  ): Promise<PrismaDoctorSchedule> {
    return this.prisma.doctorSchedule.delete(args);
  }

  async getDoctor(parentId: string): Promise<PrismaDoctor | null> {
    return this.prisma.doctorSchedule
      .findUnique({
        where: { id: parentId },
      })
      .doctor();
  }
}
