/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DoctorScheduleService } from "../doctorSchedule.service";
import { DoctorScheduleCreateInput } from "./DoctorScheduleCreateInput";
import { DoctorSchedule } from "./DoctorSchedule";
import { DoctorScheduleFindManyArgs } from "./DoctorScheduleFindManyArgs";
import { DoctorScheduleWhereUniqueInput } from "./DoctorScheduleWhereUniqueInput";
import { DoctorScheduleUpdateInput } from "./DoctorScheduleUpdateInput";

export class DoctorScheduleControllerBase {
  constructor(protected readonly service: DoctorScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DoctorSchedule })
  async createDoctorSchedule(
    @common.Body() data: DoctorScheduleCreateInput
  ): Promise<DoctorSchedule> {
    return await this.service.createDoctorSchedule({
      data: {
        ...data,

        doctor: data.doctor
          ? {
              connect: data.doctor,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dayOfWeek: true,
        startTime: true,
        endTime: true,

        doctor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DoctorSchedule] })
  @ApiNestedQuery(DoctorScheduleFindManyArgs)
  async doctorSchedules(
    @common.Req() request: Request
  ): Promise<DoctorSchedule[]> {
    const args = plainToClass(DoctorScheduleFindManyArgs, request.query);
    return this.service.doctorSchedules({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dayOfWeek: true,
        startTime: true,
        endTime: true,

        doctor: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DoctorSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async doctorSchedule(
    @common.Param() params: DoctorScheduleWhereUniqueInput
  ): Promise<DoctorSchedule | null> {
    const result = await this.service.doctorSchedule({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dayOfWeek: true,
        startTime: true,
        endTime: true,

        doctor: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DoctorSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDoctorSchedule(
    @common.Param() params: DoctorScheduleWhereUniqueInput,
    @common.Body() data: DoctorScheduleUpdateInput
  ): Promise<DoctorSchedule | null> {
    try {
      return await this.service.updateDoctorSchedule({
        where: params,
        data: {
          ...data,

          doctor: data.doctor
            ? {
                connect: data.doctor,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dayOfWeek: true,
          startTime: true,
          endTime: true,

          doctor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DoctorSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDoctorSchedule(
    @common.Param() params: DoctorScheduleWhereUniqueInput
  ): Promise<DoctorSchedule | null> {
    try {
      return await this.service.deleteDoctorSchedule({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dayOfWeek: true,
          startTime: true,
          endTime: true,

          doctor: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
